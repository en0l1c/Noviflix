plugins {
    alias(libs.plugins.android.application)
}

android {
    namespace 'com.enolic.noviflix'
    compileSdk 35

    defaultConfig {
        applicationId "com.enolic.noviflix"
        minSdk 24
        targetSdk 35
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildFeatures {
        buildConfig true
    }

    buildTypes {
        debug {

//            applicationIdSuffix ".debug"
//            debuggable true
            /** loading system variable from windows */
//            buildConfigField "String", "BASE_URL", "\"$System.env.DEBUG_BASE_URL \""

            /** loading system variable from linux - I didnt know other way to make it work **/
            /** TODO: ask for a solution **/
            // load local.properties
            def localProperties = new Properties()
            def localPropertiesFile = rootProject.file("local.properties")
            if (localPropertiesFile.exists()) {
                localProperties.load(new FileInputStream(localPropertiesFile))
            }

            // update DEBUG_BASE_URL
            def debugBaseUrl = localProperties.getProperty("DEBUG_BASE_URL")
            println "DEBUG_BASE_URL from local.properties: $debugBaseUrl"

//            buildConfigField "String", "BASE_URL", "\"${System.getenv("DEBUG_BASE_URL") ?: debugBaseUrl}\""
            buildConfigField "String", "BASE_URL", "\"${System.env.DEBUG_BASE_URL ?: debugBaseUrl}\""

        }
        release {
            // use safest url for production
            buildConfigField "String", "BASE_URL", '"here goes a link for production (https, other link etc)"'
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
}

dependencies {

    implementation libs.appcompat
    implementation libs.material
    implementation libs.activity
    implementation libs.constraintlayout
    implementation libs.firebase.crashlytics.buildtools
    implementation libs.swiperefreshlayout
    testImplementation libs.junit
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core
    implementation libs.gson
    implementation libs.retrofit // retrofit
    implementation libs.converter.gson // to make retrofit use gson
    implementation libs.logging.interceptor // for logging responnses
    /** glide **/
    implementation libs.glide
    annotationProcessor libs.compiler



}